-- Aufgabe 6.2
SELECT JOB_ID,
       FLOOR(MAX(SALARY)) AS HÃ–CHSTE,
       MIN(SALARY) AS GERINGSTE,
       SUM(SALARY) AS SUMME,
       ROUND(AVG(SALARY),0) AS DURCHSCHNITT
FROM EMPLOYEES
GROUP BY JOB_ID;

-- Aufgabe 6.3
SELECT 
    JOB_ID, 
    COUNT(JOB_ID) AS "COUNT(*)"
FROM EMPLOYEES
GROUP BY JOB_ID;

-- Aufgabe 6.4
SELECT 
    COUNT(DISTINCT MANAGER_ID) AS "Anzahl Vorgeseztze"
FROM EMPLOYEES;

-- Aufgabe 6.5
SELECT 
    MAX(SALARY) - MIN(SALARY) AS "UNTERSCHIED"
FROM EMPLOYEES;

-- Aufgabe 6.6
SELECT MANAGER_ID, MIN(SALARY) AS niedrigstes_gehalt
FROM EMPLOYEES
WHERE MANAGER_ID IS NOT NULL
GROUP BY MANAGER_ID
HAVING MIN(SALARY) > 6000
ORDER BY niedrigstes_gehalt DESC;

-- Aufgabe 6.7
SELECT 
    COUNT(*) AS "TOTAL",
    COUNT(CASE WHEN TO_CHAR(hire_date, 'YYYY') = 1995 THEN 1 END) AS "1995",
    COUNT(CASE WHEN TO_CHAR(hire_date, 'YYYY') = 1996 THEN 1 END) AS "1996",
    COUNT(CASE WHEN TO_CHAR(hire_date, 'YYYY') = 1997 THEN 1 END) AS "1997",
    COUNT(CASE WHEN TO_CHAR(hire_date, 'YYYY') = 1998 THEN 1 END) AS "1998"
FROM EMPLOYEES;

-- Aufgabe 6.8
SELECT
    JOB_ID,
    SUM(CASE WHEN DEPARTMENT_ID = 20 THEN SALARY ELSE 0 END) AS "Abt. 20",
    SUM(CASE WHEN DEPARTMENT_ID = 50 THEN SALARY ELSE 0 END) AS "Abt. 30",
    SUM(CASE WHEN DEPARTMENT_ID = 80 THEN SALARY ELSE 0 END) AS "Abt. 50",
    SUM(CASE WHEN DEPARTMENT_ID = 90 THEN SALARY ELSE 0 END) AS "Abt. 90",
    SUM(SALARY) AS "TOTAL"
FROM EMPLOYEES
GROUP BY JOB_ID;

-- Aufgabe 7.1
SELECT 
    LOCATIONS.LOCATION_ID, 
    LOCATIONS.STREET_ADDRESS, 
    LOCATIONS.CITY, 
    LOCATIONS.STATE_PROVINCE, 
    COUNTRIES.COUNTRY_NAME
FROM LOCATIONS
NATURAL JOIN COUNTRIES;

-- Aufgbae 7.2
SELECT 
    EMPLOYEES.LAST_NAME, 
    EMPLOYEES.DEPARTMENT_ID, 
    DEPARTMENTS.DEPARTMENT_NAME
FROM EMPLOYEES
JOIN DEPARTMENTS ON EMPLOYEES.DEPARTMENT_ID = DEPARTMENTS.DEPARTMENT_ID
WHERE EMPLOYEES.DEPARTMENT_ID IS NOT NULL;

-- Aufgabe 7.3
SELECT 
    EMPLOYEES.LAST_NAME, 
    EMPLOYEES.JOB_ID, 
    EMPLOYEES.DEPARTMENT_ID, 
    DEPARTMENTS.DEPARTMENT_NAME
FROM EMPLOYEES
JOIN DEPARTMENTS ON EMPLOYEES.DEPARTMENT_ID = DEPARTMENTS.DEPARTMENT_ID
JOIN LOCATIONS ON DEPARTMENTS.LOCATION_ID = LOCATIONS.LOCATION_ID
WHERE LOCATIONS.CITY = 'Toronto';

-- Aufgabe 7.4
SELECT 
    T1.LAST_NAME AS "Angestellter", 
    T1.EMPLOYEE_ID AS "Persnr. #", 
    T2.LAST_NAME AS "Manager", 
    T2.EMPLOYEE_ID AS "Manager-ID"
FROM EMPLOYEES T1
LEFT JOIN EMPLOYEES T2 ON T1.MANAGER_ID = T2.EMPLOYEE_ID
WHERE T1.MANAGER_ID IS NOT NULL
ORDER BY T2.LAST_NAME;

-- Aufgabe 7.5
SELECT 
    T1.LAST_NAME AS "Angestellter", 
    T1.EMPLOYEE_ID AS "Persnr. #", 
    T2.LAST_NAME AS "Manager", 
    T2.EMPLOYEE_ID AS "Manager-ID"
FROM EMPLOYEES T1
LEFT JOIN EMPLOYEES T2 ON T1.MANAGER_ID = T2.EMPLOYEE_ID
ORDER BY T1.EMPLOYEE_ID;

-- Aufgabe 7.6
SELECT 
    T1.DEPARTMENT_ID AS "ABTEILUNG",
    T1.LAST_NAME AS "Angestellter",  
    T2.LAST_NAME AS "KOLLEGE"
FROM EMPLOYEES T1
LEFT JOIN EMPLOYEES T2 ON T1.DEPARTMENT_ID = T2.DEPARTMENT_ID
WHERE T1.EMPLOYEE_ID != T2.EMPLOYEE_ID
ORDER BY T1.DEPARTMENT_ID, T1.LAST_NAME;

-- Aufgabe 7.7
SELECT 
    E.LAST_NAME,
    E.JOB_ID AS,
    D.DEPARTMENT_NAME,
    E.SALARY,
    G.GRADE_LEVEL
FROM EMPLOYEES E
JOIN DEPARTMENTS D ON E.DEPARTMENT_ID = D.DEPARTMENT_ID
JOIN JOB_GRADES G ON E.SALARY BETWEEN G.LOWEST_SAL AND G.HIGHEST_SAL;

-- Aufgabe 7.8
SELECT 
    T1.LAST_NAME AS "Nachname", 
    T1.HIRE_DATE AS "Anfangsdatum", 
    T2.LAST_NAME AS "Manager", 
    T2.HIRE_DATE AS "Angangsdatum Manger"
FROM EMPLOYEES T1
JOIN EMPLOYEES T2 ON T1.MANAGER_ID = T2.EMPLOYEE_ID
WHERE T1.HIRE_DATE < T2.HIRE_DATE
ORDER BY T1.HIRE_DATE, T2.HIRE_DATE DESC;

-- Aufgabe 8.1
SELECT 
    EMPLOYEE_ID, 
    LAST_NAME,
    SALARY
FROM EMPLOYEES
WHERE SALARY > (
    SELECT AVG(SALARY)
    FROM EMPLOYEES
)
ORDER BY SALARY ASC;

-- Aufgabe 8.2
SELECT 
    EMPLOYEE_ID, 
    LAST_NAME
FROM EMPLOYEES
WHERE DEPARTMENT_ID IN (
    SELECT DISTINCT DEPARTMENT_ID
    FROM EMPLOYEES
    WHERE LAST_NAME LIKE '%u%'
    AND DEPARTMENT_ID IS NOT NULL
);

-- Aufgabe 8.3
SELECT 
    E.LAST_NAME,
    E.DEPARTMENT_ID,
    E.JOB_ID
FROM EMPLOYEES E
WHERE E.DEPARTMENT_ID IN(
    SELECT D.DEPARTMENT_ID
    FROM DEPARTMENTS D
    WHERE D.LOCATION_ID = 1700
);

-- Aufgabe 8.4
SELECT 
    LAST_NAME,
    SALARY
FROM EMPLOYEES
WHERE MANAGER_ID =(
    SELECT 
        EMPLOYEE_ID
    FROM EMPLOYEES
    WHERE LAST_NAME = 'King'
);

-- Aufgabe 8.5
SELECT
    LAST_NAME
FROM EMPLOYEES
WHERE SALARY >(
    SELECT MIN(SALARY)
    FROM EMPLOYEES
    WHERE DEPARTMENT_ID = 60
);

-- Aufgabe 8.6
SELECT 
    EMPLOYEE_ID, 
    LAST_NAME,
    SALARY
FROM EMPLOYEES
WHERE 
    DEPARTMENT_ID IN (
        SELECT DISTINCT DEPARTMENT_ID
        FROM EMPLOYEES
        WHERE LAST_NAME LIKE '%u%'
          AND DEPARTMENT_ID IS NOT NULL
    )
    AND SALARY > (
        SELECT AVG(SALARY)
        FROM EMPLOYEES
    );
    
-- Aufgabe 8.7
-- Mit Unterabfrage
SELECT
    LAST_NAME,
    HIRE_DATE
FROM EMPLOYEES
WHERE HIRE_DATE >(
    SELECT 
        HIRE_DATE
        FROM EMPLOYEES
        WHERE LAST_NAME = 'Davies'
);

-- Mit Join
SELECT
    T1.LAST_NAME,
    T1.HIRE_DATE
FROM EMPLOYEES T1
JOIN EMPLOYEES T2 ON T2.LAST_NAME = 'Davies'
WHERE T1.HIRE_DATE > T2.HIRE_DATE;

-- Aufgabe 8.8
SELECT 
    E.LAST_NAME,
    D.DEPARTMENT_NAME,
    E.DEPARTMENT_ID,
    E.SALARY
FROM EMPLOYEES E
JOIN DEPARTMENTS D ON E.DEPARTMENT_ID = D.DEPARTMENT_ID
WHERE 
    E.SALARY IN (
        SELECT DISTINCT E2.SALARY
        FROM EMPLOYEES E2
        JOIN DEPARTMENTS D2 ON E2.DEPARTMENT_ID = D2.DEPARTMENT_ID
        WHERE D2.LOCATION_ID = 1700
    );

-- Aufgabe 8.9
SELECT 
    E.LAST_NAME AS "Name Angestellter",
    E.SALARY AS "Einkommen",
    E.DEPARTMENT_ID AS "Abt.-Nr.",
    A.AVG_SALARY AS "Abteilungsdurchschnitt"
FROM EMPLOYEES E
JOIN (
    SELECT 
        DEPARTMENT_ID,
        ROUND(AVG(SALARY), 2) AS AVG_SALARY
    FROM EMPLOYEES
    WHERE DEPARTMENT_ID IS NOT NULL
    GROUP BY DEPARTMENT_ID
) A ON E.DEPARTMENT_ID = A.DEPARTMENT_ID
WHERE E.SALARY > A.AVG_SALARY
ORDER BY A.AVG_SALARY;

-- Aufgabe 8.10
SELECT 
    E.LAST_NAME
FROM EMPLOYEES E
WHERE NOT EXISTS (
    SELECT 1
    FROM EMPLOYEES M
    WHERE M.MANAGER_ID = E.EMPLOYEE_ID
);

-- Mit NOT IN
SELECT 
    LAST_NAME
FROM EMPLOYEES
WHERE EMPLOYEE_ID NOT IN (
    SELECT DISTINCT MANAGER_ID
    FROM EMPLOYEES
    WHERE MANAGER_ID IS NOT NULL
);

-- Aufgabe 9.1
SELECT DISTINCT DEPARTMENT_ID
FROM EMPLOYEES

MINUS

SELECT DISTINCT DEPARTMENT_ID
FROM EMPLOYEES
WHERE JOB_ID = 'ST_CLERK';

-- Aufgabe 9.2
SELECT COUNTRY_ID, COUNTRY_NAME
FROM COUNTRIES

MINUS

SELECT DISTINCT C.COUNTRY_ID, C.COUNTRY_NAME
FROM COUNTRIES C
JOIN LOCATIONS L ON C.COUNTRY_ID = L.COUNTRY_ID
JOIN DEPARTMENTS D ON L.LOCATION_ID = D.LOCATION_ID;

-- Aufgabe 9.3
SELECT DISTINCT JOB_ID, DEPARTMENT_ID
FROM EMPLOYEES
WHERE DEPARTMENT_ID = 10

UNION ALL

SELECT DISTINCT JOB_ID, DEPARTMENT_ID
FROM EMPLOYEES
WHERE DEPARTMENT_ID = 50

UNION ALL

SELECT DISTINCT JOB_ID, DEPARTMENT_ID
FROM EMPLOYEES
WHERE DEPARTMENT_ID = 20;

-- Aufgabe 9.4 
SELECT EMPLOYEE_ID, JOB_ID
FROM EMPLOYEES

INTERSECT

SELECT EMPLOYEE_ID, JOB_ID
FROM JOB_HISTORY
WHERE START_DATE = (
    SELECT MIN(START_DATE)
    FROM JOB_HISTORY JH2
    WHERE JH2.EMPLOYEE_ID = JOB_HISTORY.EMPLOYEE_ID
);

-- Aufgabe 9.5
SELECT LAST_NAME, DEPARTMENT_ID, NULL AS "TO_CHAR(NULL)"
FROM EMPLOYEES

UNION

SELECT NULL AS "Nachname", DEPARTMENT_ID, DEPARTMENT_NAME AS "TO_CHAR(NULL)"
FROM DEPARTMENTS;




