-- Aufgabe 6.2
SELECT JOB_ID,
       FLOOR(MAX(SALARY)) AS HÃ–CHSTE,
       MIN(SALARY) AS GERINGSTE,
       SUM(SALARY) AS SUMME,
       ROUND(AVG(SALARY),0) AS DURCHSCHNITT
FROM EMPLOYEES
GROUP BY JOB_ID;

-- Aufgabe 6.3
SELECT 
    JOB_ID, 
    COUNT(JOB_ID) AS "COUNT(*)"
FROM EMPLOYEES
GROUP BY JOB_ID;

-- Aufgabe 6.4
SELECT 
    COUNT(DISTINCT MANAGER_ID) AS "Anzahl Vorgeseztze"
FROM EMPLOYEES;

-- Aufgabe 6.5
SELECT 
    MAX(SALARY) - MIN(SALARY) AS "UNTERSCHIED"
FROM EMPLOYEES;

-- Aufgabe 6.6
SELECT MANAGER_ID, MIN(SALARY) AS niedrigstes_gehalt
FROM EMPLOYEES
WHERE MANAGER_ID IS NOT NULL
GROUP BY MANAGER_ID
HAVING MIN(SALARY) > 6000
ORDER BY niedrigstes_gehalt DESC;

-- Aufgabe 6.7
SELECT 
    COUNT(*) AS "TOTAL",
    COUNT(CASE WHEN TO_CHAR(hire_date, 'YYYY') = 1995 THEN 1 END) AS "1995",
    COUNT(CASE WHEN TO_CHAR(hire_date, 'YYYY') = 1996 THEN 1 END) AS "1996",
    COUNT(CASE WHEN TO_CHAR(hire_date, 'YYYY') = 1997 THEN 1 END) AS "1997",
    COUNT(CASE WHEN TO_CHAR(hire_date, 'YYYY') = 1998 THEN 1 END) AS "1998"
FROM EMPLOYEES;

-- Aufgabe 6.8
SELECT
    JOB_ID,
    SUM(CASE WHEN DEPARTMENT_ID = 20 THEN SALARY ELSE 0 END) AS "Abt. 20",
    SUM(CASE WHEN DEPARTMENT_ID = 50 THEN SALARY ELSE 0 END) AS "Abt. 30",
    SUM(CASE WHEN DEPARTMENT_ID = 80 THEN SALARY ELSE 0 END) AS "Abt. 50",
    SUM(CASE WHEN DEPARTMENT_ID = 90 THEN SALARY ELSE 0 END) AS "Abt. 90",
    SUM(SALARY) AS "TOTAL"
FROM EMPLOYEES
GROUP BY JOB_ID;

-- Aufgabe 7.1
SELECT 
    LOCATIONS.LOCATION_ID, 
    LOCATIONS.STREET_ADDRESS, 
    LOCATIONS.CITY, 
    LOCATIONS.STATE_PROVINCE, 
    COUNTRIES.COUNTRY_NAME
FROM LOCATIONS
NATURAL JOIN COUNTRIES;

-- Aufgbae 7.2
SELECT 
    EMPLOYEES.LAST_NAME, 
    EMPLOYEES.DEPARTMENT_ID, 
    DEPARTMENTS.DEPARTMENT_NAME
FROM EMPLOYEES
JOIN DEPARTMENTS ON EMPLOYEES.DEPARTMENT_ID = DEPARTMENTS.DEPARTMENT_ID
WHERE EMPLOYEES.DEPARTMENT_ID IS NOT NULL;

-- Aufgabe 7.3
SELECT 
    EMPLOYEES.LAST_NAME, 
    EMPLOYEES.JOB_ID, 
    EMPLOYEES.DEPARTMENT_ID, 
    DEPARTMENTS.DEPARTMENT_NAME
FROM EMPLOYEES
JOIN DEPARTMENTS ON EMPLOYEES.DEPARTMENT_ID = DEPARTMENTS.DEPARTMENT_ID
JOIN LOCATIONS ON DEPARTMENTS.LOCATION_ID = LOCATIONS.LOCATION_ID
WHERE LOCATIONS.CITY = 'Toronto';

-- Aufgabe 7.4
SELECT 
    T1.LAST_NAME AS "Angestellter", 
    T1.EMPLOYEE_ID AS "Persnr. #", 
    T2.LAST_NAME AS "Manager", 
    T2.EMPLOYEE_ID AS "Manager-ID"
FROM EMPLOYEES T1
LEFT JOIN EMPLOYEES T2 ON T1.MANAGER_ID = T2.EMPLOYEE_ID
WHERE T1.MANAGER_ID IS NOT NULL
ORDER BY T2.LAST_NAME;

-- Aufgabe 7.5
SELECT 
    T1.LAST_NAME AS "Angestellter", 
    T1.EMPLOYEE_ID AS "Persnr. #", 
    T2.LAST_NAME AS "Manager", 
    T2.EMPLOYEE_ID AS "Manager-ID"
FROM EMPLOYEES T1
LEFT JOIN EMPLOYEES T2 ON T1.MANAGER_ID = T2.EMPLOYEE_ID
ORDER BY T1.EMPLOYEE_ID;

-- Aufgabe 7.6
SELECT 
    T1.DEPARTMENT_ID AS "ABTEILUNG",
    T1.LAST_NAME AS "Angestellter",  
    T2.LAST_NAME AS "KOLLEGE"
FROM EMPLOYEES T1
LEFT JOIN EMPLOYEES T2 ON T1.DEPARTMENT_ID = T2.DEPARTMENT_ID
WHERE T1.EMPLOYEE_ID != T2.EMPLOYEE_ID
ORDER BY T1.DEPARTMENT_ID, T1.LAST_NAME;

-- Aufgabe 7.7
SELECT 
    E.LAST_NAME,
    E.JOB_ID AS,
    D.DEPARTMENT_NAME,
    E.SALARY,
    G.GRADE_LEVEL
FROM EMPLOYEES E
JOIN DEPARTMENTS D ON E.DEPARTMENT_ID = D.DEPARTMENT_ID
JOIN JOB_GRADES G ON E.SALARY BETWEEN G.LOWEST_SAL AND G.HIGHEST_SAL;

-- Aufgabe 7.8
SELECT 
    T1.LAST_NAME AS "Nachname", 
    T1.HIRE_DATE AS "Anfangsdatum", 
    T2.LAST_NAME AS "Manager", 
    T2.HIRE_DATE AS "Angangsdatum Manger"
FROM EMPLOYEES T1
JOIN EMPLOYEES T2 ON T1.MANAGER_ID = T2.EMPLOYEE_ID
WHERE T1.HIRE_DATE < T2.HIRE_DATE
ORDER BY T1.HIRE_DATE, T2.HIRE_DATE DESC;